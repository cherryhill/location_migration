diff --git a/migrations/d7_entity_location.yml b/migrations/d7_entity_location_field.yml
similarity index 86%
rename from migrations/d7_entity_location.yml
rename to migrations/d7_entity_location_field.yml
index 54fe95e..3c2e7b2 100644
--- a/migrations/d7_entity_location.yml
+++ b/migrations/d7_entity_location_field.yml
@@ -1,11 +1,11 @@
-id: d7_entity_location
+id: d7_entity_location_field
 label: Entity location field storage
 migration_tags:
   - Drupal 7
   - Configuration
 deriver: Drupal\location_migration\Plugin\migrate\D7EntityLocationDeriver
 source:
-  plugin: d7_entity_location
+  plugin: d7_entity_location_field
   constants:
     status: true
     langcode: und
diff --git a/migrations/d7_entity_location_formatter_settings.yml b/migrations/d7_entity_location_field_formatter.yml
similarity index 76%
rename from migrations/d7_entity_location_formatter_settings.yml
rename to migrations/d7_entity_location_field_formatter.yml
index b700c29..3860715 100644
--- a/migrations/d7_entity_location_formatter_settings.yml
+++ b/migrations/d7_entity_location_field_formatter.yml
@@ -1,11 +1,11 @@
-id: d7_entity_location_formatter_settings
+id: d7_entity_location_field_formatter
 label: Entity location field formatter configuration
 migration_tags:
   - Drupal 7
   - Configuration
-deriver: Drupal\location_migration\Plugin\migrate\D7LocationFieldDeriver
+deriver: Drupal\location_migration\Plugin\migrate\D7EntityLocationDeriver
 source:
-  plugin: d7_entity_location_formatter
+  plugin: d7_entity_location_field_formatter
   constants:
     third_party_settings: { }
 process:
@@ -26,5 +26,5 @@ destination:
   plugin: component_entity_display
 migration_dependencies:
   required:
-    - d7_entity_location_instance
+    - d7_entity_location_field_instance
     - d7_view_modes
diff --git a/migrations/d7_entity_location_instance.yml b/migrations/d7_entity_location_field_instance.yml
similarity index 87%
rename from migrations/d7_entity_location_instance.yml
rename to migrations/d7_entity_location_field_instance.yml
index e69738a..2c67232 100644
--- a/migrations/d7_entity_location_instance.yml
+++ b/migrations/d7_entity_location_field_instance.yml
@@ -1,11 +1,11 @@
-id: d7_entity_location_instance
+id: d7_entity_location_field_instance
 label: Entity location field instance
 migration_tags:
   - Drupal 7
   - Configuration
 deriver: Drupal\location_migration\Plugin\migrate\D7EntityLocationDeriver
 source:
-  plugin: d7_entity_location_instance
+  plugin: d7_entity_location_field_instance
   constants:
     required: false
     status: true
@@ -32,4 +32,4 @@ destination:
   plugin: entity:field_config
 migration_dependencies:
   required:
-    - d7_entity_location
+    - d7_entity_location_field
diff --git a/migrations/d7_entity_location_widget_settings.yml b/migrations/d7_entity_location_field_widget.yml
similarity index 76%
rename from migrations/d7_entity_location_widget_settings.yml
rename to migrations/d7_entity_location_field_widget.yml
index dfd01aa..dd2c159 100644
--- a/migrations/d7_entity_location_widget_settings.yml
+++ b/migrations/d7_entity_location_field_widget.yml
@@ -1,11 +1,11 @@
-id: d7_entity_location_widget_settings
+id: d7_entity_location_field_widget
 label: Entity location field widget configuration
 migration_tags:
   - Drupal 7
   - Configuration
-deriver: Drupal\location_migration\Plugin\migrate\D7LocationFieldDeriver
+deriver: Drupal\location_migration\Plugin\migrate\D7EntityLocationDeriver
 source:
-  plugin: d7_entity_location_instance
+  plugin: d7_entity_location_field_instance
   constants:
     form_mode: default
     third_party_settings: {}
@@ -26,4 +26,4 @@ destination:
   plugin: component_entity_form_display
 migration_dependencies:
   required:
-    - d7_entity_location_instance
+    - d7_entity_location_field_instance
diff --git a/src/LocationMigration.php b/src/LocationMigration.php
index 67afa25..f6f28fd 100644
--- a/src/LocationMigration.php
+++ b/src/LocationMigration.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\location_migration;
 
+use Drupal\Core\Plugin\PluginBase;
 use Drupal\field\Entity\FieldStorageConfig;
 
 /**
@@ -11,6 +12,13 @@ use Drupal\field\Entity\FieldStorageConfig;
  */
 final class LocationMigration {
 
+  /**
+   * Tag for migration plugin definitions that are already processed.
+   *
+   * @var string
+   */
+  const LOCATION_MIGRATION_ALTER_DONE = 'Processed by Location Migration';
+
   /**
    * Migration tag for migrations of locations that aren't stored in a field.
    *
@@ -128,6 +136,42 @@ final class LocationMigration {
     return implode('_', $pieces);
   }
 
+  /**
+   * Merges derivative migration dependencies.
+   *
+   * @param array $migration_dependencies
+   *   The array of the migration dependencies.
+   * @param string[] $base_plugin_ids
+   *   An array of base plugin IDs of the required, additional migration
+   *   dependencies.
+   * @param string[] $derivative_pieces
+   *   An array of the derivative pieces.
+   */
+  public static function mergeDerivedRequiredDependencies(array &$migration_dependencies, array $base_plugin_ids, array $derivative_pieces): void {
+    $dependencies_to_add = [];
+    $derivative_suffix = implode(PluginBase::DERIVATIVE_SEPARATOR, $derivative_pieces);
+    foreach ($base_plugin_ids as $base_plugin_id) {
+      $dependencies_to_add[] = implode(PluginBase::DERIVATIVE_SEPARATOR, [
+        $base_plugin_id,
+        $derivative_suffix,
+      ]);
+    }
+
+    // Remove non-derived dependencies.
+    foreach ($base_plugin_ids as $base_plugin_id) {
+      if (($key = array_search($base_plugin_id, $migration_dependencies['required'])) !== FALSE) {
+        unset($migration_dependencies['required'][$key]);
+      }
+    }
+
+    $migration_dependencies['required'] = array_unique(
+      array_merge(
+        array_values($migration_dependencies['required']),
+        $dependencies_to_add
+      )
+    );
+  }
+
   /**
    * Returns the field name of the additional geolocation field.
    *
diff --git a/src/MigrationPluginAlterer.php b/src/MigrationPluginAlterer.php
index 1ca2d67..71a472b 100644
--- a/src/MigrationPluginAlterer.php
+++ b/src/MigrationPluginAlterer.php
@@ -47,24 +47,33 @@ class MigrationPluginAlterer {
 
     $node_migration_ids = array_keys(
       array_filter($d7_definitions, function (array $migration_plugin) {
+        $migration_tags = $migration_plugin['migration_tags'] ?? [];
         $destination_plugin = $migration_plugin['destination']['plugin'] ?? NULL;
-        return $destination_plugin && in_array($destination_plugin, [
-          'entity:node',
-          'entity_revision:node',
-          'entity_complete:node',
-        ], TRUE);
+        return $destination_plugin &&
+          !in_array(LocationMigration::LOCATION_MIGRATION_ALTER_DONE, $migration_tags, TRUE) &&
+          in_array($destination_plugin, [
+            'entity:node',
+            'entity_revision:node',
+            'entity_complete:node',
+          ], TRUE);
       })
     );
     $taxonomy_migration_ids = array_keys(
       array_filter($d7_definitions, function (array $migration_plugin) {
+        $migration_tags = $migration_plugin['migration_tags'] ?? [];
         $destination_plugin = $migration_plugin['destination']['plugin'] ?? NULL;
-        return $destination_plugin === 'entity:taxonomy_term';
+        return $destination_plugin &&
+          !in_array(LocationMigration::LOCATION_MIGRATION_ALTER_DONE, $migration_tags, TRUE) &&
+          $destination_plugin === 'entity:taxonomy_term';
       })
     );
     $user_migration_ids = array_keys(
       array_filter($d7_definitions, function (array $migration_plugin) {
+        $migration_tags = $migration_plugin['migration_tags'] ?? [];
         $destination_plugin = $migration_plugin['destination']['plugin'] ?? NULL;
-        return $destination_plugin === 'entity:user';
+        return $destination_plugin &&
+          !in_array(LocationMigration::LOCATION_MIGRATION_ALTER_DONE, $migration_tags, TRUE) &&
+          $destination_plugin === 'entity:user';
       })
     );
 
@@ -88,7 +97,7 @@ class MigrationPluginAlterer {
 
     // Add "entity location" field config migration dependencies to those
     // content migrations that needs them.
-    $entity_migration_plugin_ids_with_entity_locations = [];
+    $entity_migration_plugin_ids_with_entity_location = [];
     foreach ($entity_location_migrations as $entity_location_migration_plugin_id => $entity_location_migration_plugin_def) {
       $entity_type_id = $entity_location_migration_plugin_def['source']['entity_type'];
       $bundle = $entity_location_migration_plugin_def['source']['bundle'] ?? NULL;
@@ -137,19 +146,23 @@ class MigrationPluginAlterer {
       }
 
       if (!empty($migration_ids_to_extend)) {
-        $preexisting_ids = $entity_migration_plugin_ids_with_entity_locations[$entity_type_id] ?? [];
-        $entity_migration_plugin_ids_with_entity_locations[$entity_type_id] = array_unique(
+        $preexisting_ids = $entity_migration_plugin_ids_with_entity_location[$entity_type_id] ?? [];
+        $entity_migration_plugin_ids_with_entity_location[$entity_type_id] = array_unique(
           array_merge($preexisting_ids, $migration_ids_to_extend)
         );
       }
       foreach ($migration_ids_to_extend as $migration_id_to_extend) {
+        $definition_tags = $definitions[$migration_id_to_extend]['migration_tags'] ?? [];
         $definitions[$migration_id_to_extend]['migration_dependencies']['required'][] = $entity_location_migration_plugin_id;
+        $definitions[$migration_id_to_extend]['migration_tags'] = array_unique(
+          array_merge($definition_tags, [LocationMigration::LOCATION_MIGRATION_ALTER_DONE])
+        );
       }
     }
 
     // We have to determine which entity locations might have multiple values.
     $entity_location_cardinalities = [];
-    $elfc_source = static::getSourcePlugin('d7_entity_location_instance');
+    $elfc_source = static::getSourcePlugin('d7_entity_location_field_instance');
     assert($elfc_source instanceof EntityLocationFieldInstance);
     foreach ($elfc_source as $elfc_source_row) {
       assert($elfc_source_row instanceof Row);
@@ -167,49 +180,39 @@ class MigrationPluginAlterer {
 
     // Add the field value processes to the content entity migrations that needs
     // them.
-    foreach ($entity_migration_plugin_ids_with_entity_locations as $entity_type_id => $content_migration_plugin_ids) {
+    foreach ($entity_migration_plugin_ids_with_entity_location as $entity_type_id => $content_migration_plugin_ids) {
 
       foreach ($content_migration_plugin_ids as $content_migration_plugin_id) {
         $definition = &$definitions[$content_migration_plugin_id];
         $bundle = $definition['source']['node_type'] ?? $definition['source']['bundle'] ?? 'user';
         $entity_location_cardinality = $entity_location_cardinalities[$entity_type_id][$bundle];
         $base_name = LocationMigration::getEntityLocationFieldBaseName($entity_type_id, $entity_location_cardinality);
+        $process_base = ['entity_type_id' => $entity_type_id];
 
         // Location to address field.
         $definition['process'][$base_name] = [
           'plugin' => 'location_to_address',
-          'entity_type_id' => $entity_type_id,
-        ];
-
+        ] + $process_base;
         // Location to geolocation field.
         $definition['process'][LocationMigration::getGeolocationFieldName($base_name)] = [
           'plugin' => 'location_to_geolocation',
-          'entity_type_id' => $entity_type_id,
-        ];
-
+        ] + $process_base;
         // Location email to email field.
         $definition['process'][LocationMigration::getEmailFieldName($base_name)] = [
           'plugin' => 'location_email_to_email',
-          'entity_type_id' => $entity_type_id,
-        ];
-
+        ] + $process_base;
         // Location fax to telephone field.
         $definition['process'][LocationMigration::getFaxFieldName($base_name)] = [
           'plugin' => 'location_fax_to_telephone',
-          'entity_type_id' => $entity_type_id,
-        ];
-
+        ] + $process_base;
         // Location phone to telephone field.
         $definition['process'][LocationMigration::getPhoneFieldName($base_name)] = [
           'plugin' => 'location_phone_to_telephone',
-          'entity_type_id' => $entity_type_id,
-        ];
-
+        ] + $process_base;
         // Location "www" to link field.
         $definition['process'][LocationMigration::getWwwFieldName($base_name)] = [
           'plugin' => 'location_www_to_link',
-          'entity_type_id' => $entity_type_id,
-        ];
+        ] + $process_base;
       }
     }
   }
diff --git a/src/Plugin/migrate/D7EntityLocationDeriver.php b/src/Plugin/migrate/D7EntityLocationDeriver.php
index ff864d3..2d52e79 100644
--- a/src/Plugin/migrate/D7EntityLocationDeriver.php
+++ b/src/Plugin/migrate/D7EntityLocationDeriver.php
@@ -2,70 +2,27 @@
 
 namespace Drupal\location_migration\Plugin\migrate;
 
-use Drupal\Component\Plugin\Derivative\DeriverBase;
-use Drupal\Core\Plugin\PluginBase;
-use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\location_migration\LocationMigration;
-use Drupal\migrate\Exception\RequirementsException;
-use Drupal\migrate\Plugin\MigrationDeriverTrait;
-use Drupal\migrate\Row;
-use Drupal\migrate_drupal\Plugin\migrate\source\DrupalSqlBase;
 
 /**
- * Deriver geolocation field config migrations of Drupal 7 Location CCK fields.
+ * Derives geolocation field config migrations of Drupal 7 entity locations.
  *
  * This deriver class derives field storage, field instance and field widget
- * migrations of geolocation fields while the source field is mapped to an
- * address field.
+ * migrations of those fields which are required to store the "entity location"
+ * data – which wasn't stored in a Drupal 7 location field.
  */
-class D7EntityLocationDeriver extends DeriverBase {
-
-  use StringTranslationTrait;
-  use MigrationDeriverTrait;
+class D7EntityLocationDeriver extends LocationDeriverBase {
 
   /**
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    $source = $this->getSourcePlugin($base_plugin_definition['source']['plugin']);
-    assert($source instanceof DrupalSqlBase);
-
-    try {
-      $source->checkRequirements();
-    }
-    catch (RequirementsException $e) {
-      // If the source plugin requirements failed, that means we do not have a
-      // Drupal source database configured - there is nothing to generate.
-      return $this->derivatives;
-    }
-
-    $derivatives = [];
-    try {
-      foreach ($source as $row) {
-        assert($row instanceof Row);
-
-        $entity_type = $row->getSourceProperty('entity_type');
-        $bundle = $row->getSourceProperty('bundle');
-        $values = [
-          'entity_type' => $entity_type,
-          'bundle' => $bundle,
-        ];
-        $derivative_id = $bundle !== NULL
-          ? $entity_type . PluginBase::DERIVATIVE_SEPARATOR . $bundle
-          : $entity_type;
-        $derivatives[$derivative_id] = $values;
-      }
-    }
-    catch (\Exception $e) {
-      return $this->derivatives;
-    }
-
     // Using the same derivative for field storage and field instance
     // migrations. Field storage migrations are always derived by their parent
     // entity type. Field instance migrations are derived by parent entity type
     // and by bundle. For bundle-less entities (like user), the bundle will be
     // the entity type, like "d7_entity_location_instance:user:user".
-    foreach ($derivatives as $derivative_id => $values) {
+    foreach (static::getDerivatives($base_plugin_definition) as $derivative_id => $values) {
       [
         'entity_type' => $entity_type,
         'bundle' => $bundle,
@@ -80,38 +37,35 @@ class D7EntityLocationDeriver extends DeriverBase {
 
       // Process dependencies.
       $migration_required_deps = $derivative_definition['migration_dependencies']['required'] ?? [];
-      $storage_migration_dep_key = array_search('d7_entity_location', $migration_required_deps);
+      $storage_migration_dep_key = array_search('d7_entity_location_field', $migration_required_deps);
       if ($storage_migration_dep_key !== FALSE) {
-        $derivative_definition['migration_dependencies']['required'][$storage_migration_dep_key] .= PluginBase::DERIVATIVE_SEPARATOR . $entity_type;
+        LocationMigration::mergeDerivedRequiredDependencies(
+          $derivative_definition['migration_dependencies'],
+          ['d7_entity_location_field'],
+          [$entity_type]
+        );
       }
 
-      $instance_migration_dep_key = array_search('d7_entity_location_instance', $migration_required_deps);
+      $instance_migration_dep_key = array_search('d7_entity_location_field_instance', $migration_required_deps);
       if ($instance_migration_dep_key !== FALSE) {
-        $derivative_definition['migration_dependencies']['required'][$instance_migration_dep_key] .= implode(PluginBase::DERIVATIVE_SEPARATOR, array_filter([
-          $entity_type,
-          $bundle,
-        ]));
+        LocationMigration::mergeDerivedRequiredDependencies(
+          $derivative_definition['migration_dependencies'],
+          ['d7_entity_location_field_instance'],
+          array_filter([$entity_type, $bundle])
+        );
       }
 
-      if ($entity_type === 'node') {
-        $derivative_definition['migration_dependencies']['required'][] = 'd7_node_type';
-      }
+      switch ($entity_type) {
+        case 'node':
+          $derivative_definition['migration_dependencies']['required'][] = 'd7_node_type';
+          break;
 
-      if ($entity_type === 'taxonomy_term') {
-        $derivative_definition['migration_dependencies']['required'][] = 'd7_taxonomy_vocabulary';
+        case 'taxonomy_term':
+          $derivative_definition['migration_dependencies']['required'][] = 'd7_taxonomy_vocabulary';
+          break;
       }
 
-      $derivative_definition['label'] = !empty($bundle)
-        ? $this->t('@label (@entity-type, @bundle)', [
-          '@label' => $derivative_definition['label'],
-          '@entity-type' => $entity_type,
-          '@bundle' => $bundle,
-        ])
-        : $this->t('@label (@entity-type)', [
-          '@label' => $derivative_definition['label'],
-          '@entity-type' => $entity_type,
-        ]);
-
+      $this->applyDerivativeLabel($derivative_definition);
       $this->derivatives[$derivative_id] = $derivative_definition;
     }
 
diff --git a/src/Plugin/migrate/D7LocationFieldDeriver.php b/src/Plugin/migrate/D7LocationFieldDeriver.php
index 9f129c9..6e16d09 100644
--- a/src/Plugin/migrate/D7LocationFieldDeriver.php
+++ b/src/Plugin/migrate/D7LocationFieldDeriver.php
@@ -2,73 +2,37 @@
 
 namespace Drupal\location_migration\Plugin\migrate;
 
-use Drupal\Component\Plugin\Derivative\DeriverBase;
-use Drupal\Core\Plugin\PluginBase;
-use Drupal\migrate\Exception\RequirementsException;
-use Drupal\migrate\Plugin\MigrationDeriverTrait;
-use Drupal\migrate\Row;
-use Drupal\migrate_drupal\Plugin\migrate\source\DrupalSqlBase;
+use Drupal\location_migration\LocationMigration;
 
 /**
  * Deriver geolocation field config migrations of Drupal 7 Location CCK fields.
  *
  * This deriver class derives field storage, field instance and field widget
- * migrations of geolocation fields while the source field is mapped to an
- * address field.
+ * migrations of the additional fields which are required to store those data
+ * which cannot be migrated into an address field. The original source location
+ * field is mapped to an address field.
+ *
+ * @see \Drupal\location_migration\Plugin\migrate\field\Location
  */
-class D7LocationFieldDeriver extends DeriverBase {
-
-  use MigrationDeriverTrait;
+class D7LocationFieldDeriver extends LocationDeriverBase {
 
   /**
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    $source = $this->getSourcePlugin($base_plugin_definition['source']['plugin']);
-    assert($source instanceof DrupalSqlBase);
-
-    try {
-      $source->checkRequirements();
-    }
-    catch (RequirementsException $e) {
-      // If the source plugin requirements failed, that means we do not have a
-      // Drupal source database configured - there is nothing to generate.
-      return $this->derivatives;
-    }
-
-    $derivatives = [];
-    try {
-      foreach ($source as $row) {
-        assert($row instanceof Row);
-
-        $entity_type = $row->getSourceProperty('entity_type');
-        $bundle = $row->getSourceProperty('bundle');
-        $values = [
-          'entity_type' => $entity_type,
-          'bundle' => $bundle,
-        ];
-        $derivative_id = $bundle !== NULL
-          ? $entity_type . PluginBase::DERIVATIVE_SEPARATOR . $bundle
-          : $entity_type;
-        $derivatives[$derivative_id] = $values;
-      }
-    }
-    catch (\Exception $e) {
-      return $this->derivatives;
-    }
-
     // Using the same derivative for field storage and field instance
     // migrations. Field storage migrations are always derived by their parent
     // entity type. Field instance migrations are derived by parent entity type
     // and by bundle. For bundle-less entities (like user), the bundle will be
     // the entity type, like "d7_field_location_instance:user:user".
-    foreach ($derivatives as $derivative_id => $values) {
+    foreach (static::getDerivatives($base_plugin_definition) as $derivative_id => $values) {
       [
         'entity_type' => $entity_type,
         'bundle' => $bundle,
       ] = $values;
       $derivative_definition = $base_plugin_definition;
       $derivative_definition['source']['entity_type'] = $entity_type;
+      $derivative_definition['migration_tags'][] = LocationMigration::FIELD_LOCATION_MIGRATION_TAG;
 
       if ($bundle !== NULL) {
         $derivative_definition['source']['bundle'] = $bundle;
@@ -78,17 +42,23 @@ class D7LocationFieldDeriver extends DeriverBase {
       $migration_required_deps = $derivative_definition['migration_dependencies']['required'] ?? [];
       $storage_migration_dep_key = array_search('d7_field_location', $migration_required_deps);
       if ($storage_migration_dep_key !== FALSE) {
-        $derivative_definition['migration_dependencies']['required'][$storage_migration_dep_key] .= PluginBase::DERIVATIVE_SEPARATOR . $entity_type;
+        LocationMigration::mergeDerivedRequiredDependencies(
+          $derivative_definition['migration_dependencies'],
+          ['d7_field_location'],
+          [$entity_type]
+        );
       }
 
       $instance_migration_dep_key = array_search('d7_field_location_instance', $migration_required_deps);
       if ($instance_migration_dep_key !== FALSE) {
-        $derivative_definition['migration_dependencies']['required'][$instance_migration_dep_key] .= implode(PluginBase::DERIVATIVE_SEPARATOR, array_filter([
-          $entity_type,
-          $bundle,
-        ]));
+        LocationMigration::mergeDerivedRequiredDependencies(
+          $derivative_definition['migration_dependencies'],
+          ['d7_field_location_instance'],
+          array_filter([$entity_type, $bundle])
+        );
       }
 
+      $this->applyDerivativeLabel($derivative_definition);
       $this->derivatives[$derivative_id] = $derivative_definition;
     }
 
diff --git a/src/Plugin/migrate/source/DestinationFieldTrait.php b/src/Plugin/migrate/DestinationFieldTrait.php
similarity index 99%
rename from src/Plugin/migrate/source/DestinationFieldTrait.php
rename to src/Plugin/migrate/DestinationFieldTrait.php
index 44da056..afe50b0 100644
--- a/src/Plugin/migrate/source/DestinationFieldTrait.php
+++ b/src/Plugin/migrate/DestinationFieldTrait.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\location_migration\Plugin\migrate\source;
+namespace Drupal\location_migration\Plugin\migrate;
 
 use Drupal\link\LinkItemInterface;
 use Drupal\location_migration\LocationMigration;
diff --git a/src/Plugin/migrate/LocationDeriverBase.php b/src/Plugin/migrate/LocationDeriverBase.php
new file mode 100644
index 0000000..191a466
--- /dev/null
+++ b/src/Plugin/migrate/LocationDeriverBase.php
@@ -0,0 +1,88 @@
+<?php
+
+namespace Drupal\location_migration\Plugin\migrate;
+
+use Drupal\Component\Plugin\Derivative\DeriverBase;
+use Drupal\Core\Plugin\PluginBase;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\migrate\Exception\RequirementsException;
+use Drupal\migrate\Plugin\MigrationDeriverTrait;
+use Drupal\migrate\Row;
+use Drupal\migrate_drupal\Plugin\migrate\source\DrupalSqlBase;
+
+/**
+ * Base class for Location migration deriver classes.
+ */
+abstract class LocationDeriverBase extends DeriverBase {
+
+  use MigrationDeriverTrait;
+  use StringTranslationTrait;
+
+  /**
+   * Returns source plugin configurations for migration plugin derivatives.
+   *
+   * @param array $base_plugin_definition
+   *   A base migration plugin definition.
+   *
+   * @return array
+   *   The source plugin definition for the given migration definition's
+   *   derivatives, keyed by the derivative ID.
+   */
+  public static function getDerivatives(array $base_plugin_definition): array {
+    $source = static::getSourcePlugin($base_plugin_definition['source']['plugin']);
+    assert($source instanceof DrupalSqlBase);
+
+    try {
+      $source->checkRequirements();
+    }
+    catch (RequirementsException $e) {
+      // If the source plugin requirements failed, that means we do not have a
+      // Drupal source database configured - there is nothing to generate.
+      return [];
+    }
+
+    $derivatives = [];
+    try {
+      foreach ($source as $row) {
+        assert($row instanceof Row);
+        $entity_type = $row->getSourceProperty('entity_type');
+        $bundle = $row->getSourceProperty('bundle');
+        $values = [
+          'entity_type' => $entity_type,
+          'bundle' => $bundle,
+        ];
+        $derivative_id = $bundle !== NULL
+          ? $entity_type . PluginBase::DERIVATIVE_SEPARATOR . $bundle
+          : $entity_type;
+        $derivatives[$derivative_id] = $values;
+      }
+    }
+    catch (\Exception $e) {
+    }
+
+    return $derivatives;
+  }
+
+  /**
+   * Constructs a derivative label.
+   *
+   * @param array $migration_plugin_definition
+   *   The (final) migration plugin definition of a derivative.
+   */
+  public function applyDerivativeLabel(array &$migration_plugin_definition): void {
+    $entity_type_id = $migration_plugin_definition['source']['entity_type'];
+    $bundle = $migration_plugin_definition['source']['bundle'] ?? NULL;
+
+    $migration_plugin_definition['label'] = !empty($bundle)
+      ? $this->t('@label (@entity-type, @bundle)', [
+        '@label' => $migration_plugin_definition['label'],
+        '@entity-type' => $entity_type_id,
+        '@bundle' => $bundle,
+      ])
+      : $this->t('@label (@entity-type)', [
+        '@label' => $migration_plugin_definition['label'],
+        '@entity-type' => $entity_type_id,
+      ]);
+  }
+
+}
diff --git a/src/Plugin/migrate/field/Location.php b/src/Plugin/migrate/field/Location.php
index 0af7dc7..8bfb312 100644
--- a/src/Plugin/migrate/field/Location.php
+++ b/src/Plugin/migrate/field/Location.php
@@ -2,11 +2,9 @@
 
 namespace Drupal\location_migration\Plugin\migrate\field;
 
-use Drupal\Core\Plugin\PluginBase;
 use Drupal\location_migration\LocationMigration;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate_drupal\Plugin\migrate\field\FieldPluginBase;
-use Drupal\migrate_drupal\Plugin\migrate\source\DrupalSqlBase;
 
 /**
  * Migration process plugin for migrations related to Drupal 7 location fields.
@@ -89,63 +87,17 @@ class Location extends FieldPluginBase {
     ]);
 
     // Add the extra field's migrations as required dependencies.
-    $required_dependency_base_plugin_ids = [
-      'd7_field_location_instance',
-      'd7_field_location_widget',
-    ];
-    $derivative_suffixes = [
-      $data['entity_type'],
-      $data['bundle'],
-    ];
-    $this->mergeDerivedRequiredDependencies($migration_dependencies, $required_dependency_base_plugin_ids, $derivative_suffixes);
-    $migration->set('migration_dependencies', $migration_dependencies);
-  }
-
-  /**
-   * Merges derivative migration dependencies.
-   *
-   * @param array $migration_dependencies
-   *   The array of the migration dependencies.
-   * @param string[] $base_plugin_ids
-   *   An array of base plugin IDs of the required, additional migration
-   *   dependencies.
-   * @param string[] $derivative_pieces
-   *   An array of the derivative pieces.
-   */
-  protected function mergeDerivedRequiredDependencies(array &$migration_dependencies, array $base_plugin_ids, array $derivative_pieces): void {
-    $dependencies_to_add = [];
-    $derivative_suffix = implode(PluginBase::DERIVATIVE_SEPARATOR, $derivative_pieces);
-    foreach ($base_plugin_ids as $base_plugin_id) {
-      $dependencies_to_add[] = implode(PluginBase::DERIVATIVE_SEPARATOR, [
-        $base_plugin_id,
-        $derivative_suffix,
-      ]);
-    }
-
-    $migration_dependencies['required'] = array_unique(
-      array_merge(
-        array_values($migration_dependencies['required']),
-        $dependencies_to_add
-      )
+    LocationMigration::mergeDerivedRequiredDependencies(
+      $migration_dependencies,
+      ['d7_field_location'],
+      [$data['entity_type']],
+      );
+    LocationMigration::mergeDerivedRequiredDependencies(
+      $migration_dependencies,
+      ['d7_field_location_instance'],
+      [$data['entity_type'], $data['bundle']],
     );
-  }
-
-  /**
-   * Checks if a given module is enabled in the source Drupal database.
-   *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
-   *   The current migration.
-   * @param string $module_name
-   *   Name of module to check.
-   *
-   * @return bool
-   *   TRUE if module is enabled on the origin system, FALSE if not.
-   */
-  protected function moduleExistsInSource(MigrationInterface $migration, string $module_name): bool {
-    $source = $migration->getSourcePlugin();
-    assert($source instanceof DrupalSqlBase);
-    $system_data = $source->getSystemData();
-    return !empty($system_data['module'][$module_name]['status']);
+    $migration->set('migration_dependencies', $migration_dependencies);
   }
 
 }
diff --git a/src/Plugin/migrate/source/EntityLocationFieldBase.php b/src/Plugin/migrate/source/EntityLocationFieldBase.php
deleted file mode 100644
index 5aa192b..0000000
--- a/src/Plugin/migrate/source/EntityLocationFieldBase.php
+++ /dev/null
@@ -1,276 +0,0 @@
-<?php
-
-namespace Drupal\location_migration\Plugin\migrate\source;
-
-use Drupal\Core\Database\Query\SelectInterface;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Drupal\Core\Field\FieldTypePluginManagerInterface;
-use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
-use Drupal\Core\State\StateInterface;
-use Drupal\location_migration\LocationMigration;
-use Drupal\location_migration\Plugin\migrate\process\LocationToAddressFieldInstanceSettings;
-use Drupal\migrate\Plugin\MigrationInterface;
-use Drupal\migrate_drupal\Plugin\migrate\source\DrupalSqlBase;
-use Symfony\Component\DependencyInjection\ContainerInterface;
-
-/**
- * Base class for migrating location fields for data stored without fields.
- */
-abstract class EntityLocationFieldBase extends DrupalSqlBase implements ContainerFactoryPluginInterface {
-
-  use DestinationFieldTrait;
-
-  /**
-   * The field type plugin manager.
-   *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
-   */
-  protected $fieldTypePluginManager;
-
-  /**
-   * Constructs an entity location field source plugin instance.
-   *
-   * @param array $configuration
-   *   A configuration array containing information about the plugin instance.
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param mixed $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
-   *   The current migration plugin instance.
-   * @param \Drupal\Core\State\StateInterface $state
-   *   The state service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   *   The entity type manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   *   The field type plugin manager.
-   */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, StateInterface $state, EntityTypeManagerInterface $entity_type_manager, FieldTypePluginManagerInterface $field_type_manager) {
-    $configuration += [
-      'entity_type' => NULL,
-      'bundle' => NULL,
-    ];
-    parent::__construct($configuration, $plugin_id, $plugin_definition, $migration, $state, $entity_type_manager);
-    $this->fieldTypePluginManager = $field_type_manager;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration = NULL) {
-    return new static(
-      $configuration,
-      $plugin_id,
-      $plugin_definition,
-      $migration,
-      $container->get('state'),
-      $container->get('entity_type.manager'),
-      $container->get('plugin.manager.field.field_type')
-    );
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function query() {
-    [
-      'entity_type' => $entity_type,
-      'bundle' => $bundle,
-    ] = $this->configuration;
-    $subquery = NULL;
-
-    if (
-      $this->moduleExists('location_node') &&
-      (!$entity_type || $entity_type === 'node') &&
-      $this->getDatabase()->schema()->tableExists('node_type')
-    ) {
-      $subquery = $this->select('node_type', 'nt');
-      $subquery->addExpression("'node'", 'entity_type');
-      $subquery->addField('nt', 'type', 'bundle');
-      $subquery->addExpression("CONCAT('location_settings_node_', nt.type)", 'variable_name');
-
-      if ($bundle) {
-        $subquery->condition('nt.type', $bundle);
-      }
-    }
-
-    if (
-      $this->moduleExists('location_taxonomy') &&
-      (!$entity_type || $entity_type === 'taxonomy_term') &&
-      $this->getDatabase()->schema()->tableExists('taxonomy_vocabulary')
-    ) {
-      $union_query = $this->select('taxonomy_vocabulary', 'tv');
-      $union_query->addExpression("'taxonomy_term'", 'entity_type');
-      $union_query->addField('tv', 'machine_name', 'bundle');
-      $union_query->addExpression("CONCAT('location_taxonomy_', tv.vid)", 'variable_name');
-
-      if ($bundle) {
-        $union_query->condition('tv.machine_name', $bundle);
-      }
-
-      $this->addUnionQuery($subquery, $union_query);
-    }
-
-    if (
-      $this->moduleExists('location_user') &&
-      (!$entity_type || $entity_type === 'user') &&
-      $this->variableGet('location_settings_user', FALSE)
-    ) {
-      $union_query = $this->select('variable', 'uv')
-        ->condition('uv.name', 'location_settings_user');
-      $union_query->addExpression("'user'", 'entity_type');
-      $union_query->addExpression("'user'", 'bundle');
-      $union_query->addExpression("'location_settings_user'", 'variable_name');
-
-      $this->addUnionQuery($subquery, $union_query);
-    }
-
-    if ($subquery instanceof SelectInterface) {
-      $query = $this->select('variable', 'v');
-      $query->join($subquery, 'els', 'v.name = els.variable_name');
-      $query->addField('els', 'entity_type', 'entity_type');
-      $query->addField('els', 'bundle', 'bundle');
-      $query->addField('v', 'value', 'data');
-      return $query;
-    }
-
-    // When we don't have to create additional field related configurations for
-    // locations stored directly for nodes, taxonomy terms or users, we return
-    // a query which's result is zero rows.
-    return $this->select('system', 'system')
-      ->fields('system')
-      ->condition('system.name', 'location')
-      ->condition('system.status', 3333);
-  }
-
-  /**
-   * Performs a query union.
-   *
-   * @param \Drupal\Core\Database\Query\SelectInterface|null $destination
-   *   The "destination" query which should be extended.
-   * @param \Drupal\Core\Database\Query\SelectInterface $source
-   *   The query which should be added.
-   */
-  protected static function addUnionQuery(&$destination, SelectInterface $source) {
-    if ($destination instanceof SelectInterface) {
-      $destination->union($source);
-      return;
-    }
-
-    $destination = clone $source;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function initializeIterator() {
-    $results = $this->prepareQuery()->execute()->fetchAll();
-
-    // Add the array of all instances using the same base field to each row.
-    $rows = [];
-    foreach ($results as $result) {
-      $entity_type_id = $result['entity_type'];
-      // Let's assume that the destination entity type ID is the same as the
-      // source.
-      if (!($entity_type_definition = $this->entityTypeManager->getDefinition($entity_type_id, FALSE))) {
-        continue;
-      }
-      $field_label_args = [
-        '@entity-label' => $entity_type_definition->getSingularLabel(),
-      ];
-      $settings = unserialize($result['data']);
-      if ($settings['multiple']['max'] === '0') {
-        continue;
-      }
-      $result['location_settings'] = $settings;
-      $result['cardinality'] = (int) $settings['multiple']['max'];
-      $result['widget_weight'] = (int) ($settings['form']['weight'] ?? 0);
-      $result['formatter_weight'] = (int) ($settings['display']['weight'] ?? 0);
-      $result['field_name'] = LocationMigration::getEntityLocationFieldBaseName($entity_type_id, $result['cardinality']);
-      $address_display_is_hidden = empty(array_diff([
-        'name',
-        'street',
-        'additional',
-        'city',
-        'province',
-        'postal_code',
-        'country',
-      ], static::getDisplayHiddenFields($settings)));
-      $address_widget_is_hidden = empty(array_diff([
-        'name',
-        'street',
-        'additional',
-        'city',
-        'province',
-        'postal_code',
-        'country',
-      ], static::getFormHiddenFields($settings)));
-
-      // This module depends on Address module, so we assume that the "address"
-      // field type is available.
-      $rows[] = [
-        'type' => 'address',
-        'widget_type' => 'address_default',
-        'formatter_type' => 'address_default',
-        'field_label' => (string) $this->t('@field-label of @entity-label', $field_label_args + [
-          '@field-label' => LocationMigration::ADDRESS_FIELD_LABEL_PREFIX,
-        ]),
-        'field_instance_settings' => LocationToAddressFieldInstanceSettings::defaultSettings(),
-        'display_hidden' => $address_display_is_hidden,
-        'widget_hidden' => $address_widget_is_hidden,
-      ] + $result;
-
-      // Add additional extra fields.
-      $rows = array_merge(
-        $rows,
-        $this->getExtraFieldRows($result)
-      );
-    }
-
-    return new \ArrayIterator($rows);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fields() {
-    return [
-      'field_name' => $this->t('The field name.'),
-      'entity_type' => $this->t('The entity type.'),
-      'bundle' => $this->t('The entity bundle.'),
-      'data' => $this->t('The field instance data.'),
-      'type' => $this->t('The field type'),
-      'cardinality' => $this->t('Cardinality'),
-      'translatable' => $this->t('Translatable'),
-      'widget_type' => $this->t('The field widget plugin ID.'),
-      'formatter_type' => $this->t('The field formatter plugin ID.'),
-      'field_label' => $this->t('The label of the field.'),
-      'display_hidden' => $this->t('The field should be hidden on view display.'),
-      'widget_hidden' => $this->t('The widget should be hidden on the entity form.'),
-      'field_instance_settings' => $this->t('Field instance configuration.'),
-      'field_formatter_settings' => $this->t('Field formatter configuration.'),
-      'field_widget_settings' => $this->t('Field widget configuration.'),
-    ];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getIds() {
-    return [
-      'entity_type' => [
-        'type' => 'string',
-        'alias' => 'elfci',
-      ],
-      'bundle' => [
-        'type' => 'string',
-        'alias' => 'elfci',
-      ],
-      'field_name' => [
-        'type' => 'string',
-        'alias' => 'elfci',
-      ],
-    ];
-  }
-
-}
diff --git a/src/Plugin/migrate/source/EntityLocationFieldFormatter.php b/src/Plugin/migrate/source/EntityLocationFieldFormatter.php
index c09ca87..c9d5614 100644
--- a/src/Plugin/migrate/source/EntityLocationFieldFormatter.php
+++ b/src/Plugin/migrate/source/EntityLocationFieldFormatter.php
@@ -6,12 +6,12 @@ namespace Drupal\location_migration\Plugin\migrate\source;
  * Drupal 7 geolocation field formatter source for D7 location entity data.
  *
  * @MigrateSource(
- *   id = "d7_entity_location_formatter",
+ *   id = "d7_entity_location_field_formatter",
  *   core = {7},
- *   source_module = "location",
+ *   source_module = "location"
  * )
  */
-class EntityLocationFieldFormatter extends EntityLocationFieldBase {
+class EntityLocationFieldFormatter extends EntityLocationFieldInstance {
 
   /**
    * {@inheritdoc}
diff --git a/src/Plugin/migrate/source/EntityLocationFieldInstance.php b/src/Plugin/migrate/source/EntityLocationFieldInstance.php
index 2db4656..35636e6 100644
--- a/src/Plugin/migrate/source/EntityLocationFieldInstance.php
+++ b/src/Plugin/migrate/source/EntityLocationFieldInstance.php
@@ -2,15 +2,282 @@
 
 namespace Drupal\location_migration\Plugin\migrate\source;
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\State\StateInterface;
+use Drupal\location_migration\LocationMigration;
+use Drupal\location_migration\Plugin\migrate\DestinationFieldTrait;
+use Drupal\location_migration\Plugin\migrate\process\LocationToAddressFieldInstanceSettings;
+use Drupal\migrate\Plugin\MigrationInterface;
+use Drupal\migrate_drupal\Plugin\migrate\source\DrupalSqlBase;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
 /**
  * Drupal 7 geolocation field instance source for D7 location entity data.
  *
  * @MigrateSource(
- *   id = "d7_entity_location_instance",
+ *   id = "d7_entity_location_field_instance",
  *   core = {7},
- *   source_module = "location",
+ *   source_module = "location"
  * )
  */
-class EntityLocationFieldInstance extends EntityLocationFieldBase {
+class EntityLocationFieldInstance extends DrupalSqlBase implements ContainerFactoryPluginInterface {
+
+  use DestinationFieldTrait;
+
+  /**
+   * The field type plugin manager.
+   *
+   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   */
+  protected $fieldTypePluginManager;
+
+  /**
+   * Constructs an entity location field source plugin instance.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   *   The current migration plugin instance.
+   * @param \Drupal\Core\State\StateInterface $state
+   *   The state service.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   *   The field type plugin manager.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, StateInterface $state, EntityTypeManagerInterface $entity_type_manager, FieldTypePluginManagerInterface $field_type_manager) {
+    $configuration += [
+      'entity_type' => NULL,
+      'bundle' => NULL,
+    ];
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $migration, $state, $entity_type_manager);
+    $this->fieldTypePluginManager = $field_type_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration = NULL) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $migration,
+      $container->get('state'),
+      $container->get('entity_type.manager'),
+      $container->get('plugin.manager.field.field_type')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function query() {
+    [
+      'entity_type' => $entity_type,
+      'bundle' => $bundle,
+    ] = $this->configuration;
+    $subquery = NULL;
+
+    if (
+      $this->moduleExists('location_node') &&
+      (!$entity_type || $entity_type === 'node') &&
+      $this->getDatabase()->schema()->tableExists('node_type')
+    ) {
+      $subquery = $this->select('node_type', 'nt');
+      $subquery->addExpression("'node'", 'entity_type');
+      $subquery->addField('nt', 'type', 'bundle');
+      $subquery->addExpression("CONCAT('location_settings_node_', nt.type)", 'variable_name');
+
+      if ($bundle) {
+        $subquery->condition('nt.type', $bundle);
+      }
+    }
+
+    if (
+      $this->moduleExists('location_taxonomy') &&
+      (!$entity_type || $entity_type === 'taxonomy_term') &&
+      $this->getDatabase()->schema()->tableExists('taxonomy_vocabulary')
+    ) {
+      $union_query = $this->select('taxonomy_vocabulary', 'tv');
+      $union_query->addExpression("'taxonomy_term'", 'entity_type');
+      $union_query->addField('tv', 'machine_name', 'bundle');
+      $union_query->addExpression("CONCAT('location_taxonomy_', tv.vid)", 'variable_name');
+
+      if ($bundle) {
+        $union_query->condition('tv.machine_name', $bundle);
+      }
+
+      $this->addUnionQuery($subquery, $union_query);
+    }
+
+    if (
+      $this->moduleExists('location_user') &&
+      (!$entity_type || $entity_type === 'user') &&
+      $this->variableGet('location_settings_user', FALSE)
+    ) {
+      $union_query = $this->select('variable', 'uv')
+        ->condition('uv.name', 'location_settings_user');
+      $union_query->addExpression("'user'", 'entity_type');
+      $union_query->addExpression("'user'", 'bundle');
+      $union_query->addExpression("'location_settings_user'", 'variable_name');
+
+      $this->addUnionQuery($subquery, $union_query);
+    }
+
+    if ($subquery instanceof SelectInterface) {
+      $query = $this->select('variable', 'v');
+      $query->join($subquery, 'els', 'v.name = els.variable_name');
+      $query->addField('els', 'entity_type', 'entity_type');
+      $query->addField('els', 'bundle', 'bundle');
+      $query->addField('v', 'value', 'data');
+      return $query;
+    }
+
+    // When we don't have to create additional field related configurations for
+    // locations stored directly for nodes, taxonomy terms or users, we return
+    // a query which's result is zero rows.
+    return $this->select('system', 'system')
+      ->fields('system')
+      ->condition('system.name', 'location')
+      ->condition('system.status', 3333);
+  }
+
+  /**
+   * Performs a query union.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface|null $destination
+   *   The "destination" query which should be extended.
+   * @param \Drupal\Core\Database\Query\SelectInterface $source
+   *   The query which should be added.
+   */
+  protected static function addUnionQuery(&$destination, SelectInterface $source) {
+    if ($destination instanceof SelectInterface) {
+      $destination->union($source);
+      return;
+    }
+
+    $destination = clone $source;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function initializeIterator() {
+    $results = $this->prepareQuery()->execute()->fetchAll();
+
+    // Add the array of all instances using the same base field to each row.
+    $rows = [];
+    foreach ($results as $result) {
+      $entity_type_id = $result['entity_type'];
+      // Let's assume that the destination entity type ID is the same as the
+      // source.
+      if (!($entity_type_definition = $this->entityTypeManager->getDefinition($entity_type_id, FALSE))) {
+        continue;
+      }
+      $field_label_args = [
+        '@entity-label' => $entity_type_definition->getSingularLabel(),
+      ];
+      $settings = unserialize($result['data']);
+      if ($settings['multiple']['max'] === '0') {
+        continue;
+      }
+      $result['location_settings'] = $settings;
+      $result['cardinality'] = (int) $settings['multiple']['max'];
+      $result['widget_weight'] = (int) ($settings['form']['weight'] ?? 0);
+      $result['formatter_weight'] = (int) ($settings['display']['weight'] ?? 0);
+      $result['field_name'] = LocationMigration::getEntityLocationFieldBaseName($entity_type_id, $result['cardinality']);
+      $address_display_is_hidden = empty(array_diff([
+        'name',
+        'street',
+        'additional',
+        'city',
+        'province',
+        'postal_code',
+        'country',
+      ], static::getDisplayHiddenFields($settings)));
+      $address_widget_is_hidden = empty(array_diff([
+        'name',
+        'street',
+        'additional',
+        'city',
+        'province',
+        'postal_code',
+        'country',
+      ], static::getFormHiddenFields($settings)));
+
+      // This module depends on Address module, so we assume that the "address"
+      // field type is available.
+      $rows[] = [
+        'type' => 'address',
+        'widget_type' => 'address_default',
+        'formatter_type' => 'address_default',
+        'field_label' => (string) $this->t('@field-label of @entity-label', $field_label_args + [
+          '@field-label' => LocationMigration::ADDRESS_FIELD_LABEL_PREFIX,
+        ]),
+        'field_instance_settings' => LocationToAddressFieldInstanceSettings::defaultSettings(),
+        'display_hidden' => $address_display_is_hidden,
+        'widget_hidden' => $address_widget_is_hidden,
+      ] + $result;
+
+      // Add additional extra fields.
+      $rows = array_merge(
+        $rows,
+        $this->getExtraFieldRows($result)
+      );
+    }
+
+    return new \ArrayIterator($rows);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function fields() {
+    return [
+      'field_name' => $this->t('The field name.'),
+      'entity_type' => $this->t('The entity type.'),
+      'bundle' => $this->t('The entity bundle.'),
+      'data' => $this->t('The field instance data.'),
+      'type' => $this->t('The field type'),
+      'cardinality' => $this->t('Cardinality'),
+      'translatable' => $this->t('Translatable'),
+      'widget_type' => $this->t('The field widget plugin ID.'),
+      'formatter_type' => $this->t('The field formatter plugin ID.'),
+      'field_label' => $this->t('The label of the field.'),
+      'display_hidden' => $this->t('The field should be hidden on view display.'),
+      'widget_hidden' => $this->t('The widget should be hidden on the entity form.'),
+      'field_instance_settings' => $this->t('Field instance configuration.'),
+      'field_formatter_settings' => $this->t('Field formatter configuration.'),
+      'field_widget_settings' => $this->t('Field widget configuration.'),
+    ];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getIds() {
+    return [
+      'entity_type' => [
+        'type' => 'string',
+        'alias' => 'elfci',
+      ],
+      'bundle' => [
+        'type' => 'string',
+        'alias' => 'elfci',
+      ],
+      'field_name' => [
+        'type' => 'string',
+        'alias' => 'elfci',
+      ],
+    ];
+  }
 
 }
diff --git a/src/Plugin/migrate/source/EntityLocationFieldStorage.php b/src/Plugin/migrate/source/EntityLocationFieldStorage.php
index 7ac1b5f..5232e51 100644
--- a/src/Plugin/migrate/source/EntityLocationFieldStorage.php
+++ b/src/Plugin/migrate/source/EntityLocationFieldStorage.php
@@ -6,12 +6,12 @@ namespace Drupal\location_migration\Plugin\migrate\source;
  * Drupal 7 geolocation field storage source for D7 location entity data.
  *
  * @MigrateSource(
- *   id = "d7_entity_location",
+ *   id = "d7_entity_location_field",
  *   core = {7},
- *   source_module = "location",
+ *   source_module = "location"
  * )
  */
-class EntityLocationFieldStorage extends EntityLocationFieldBase {
+class EntityLocationFieldStorage extends EntityLocationFieldInstance {
 
   /**
    * {@inheritdoc}
diff --git a/src/Plugin/migrate/source/LocationFieldFormatter.php b/src/Plugin/migrate/source/LocationFieldFormatter.php
index 53267a2..b7b61b8 100644
--- a/src/Plugin/migrate/source/LocationFieldFormatter.php
+++ b/src/Plugin/migrate/source/LocationFieldFormatter.php
@@ -6,6 +6,7 @@ use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\field\Plugin\migrate\source\d7\FieldInstancePerViewMode;
+use Drupal\location_migration\Plugin\migrate\DestinationFieldTrait;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
diff --git a/src/Plugin/migrate/source/LocationFieldInstance.php b/src/Plugin/migrate/source/LocationFieldInstance.php
index 9ab01bf..31d9004 100644
--- a/src/Plugin/migrate/source/LocationFieldInstance.php
+++ b/src/Plugin/migrate/source/LocationFieldInstance.php
@@ -6,6 +6,7 @@ use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\field\Plugin\migrate\source\d7\FieldInstance;
+use Drupal\location_migration\Plugin\migrate\DestinationFieldTrait;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
diff --git a/src/Plugin/migrate/source/LocationFieldStorage.php b/src/Plugin/migrate/source/LocationFieldStorage.php
index 073ee45..23a6ffe 100644
--- a/src/Plugin/migrate/source/LocationFieldStorage.php
+++ b/src/Plugin/migrate/source/LocationFieldStorage.php
@@ -6,6 +6,7 @@ use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\field\Plugin\migrate\source\d7\Field;
+use Drupal\location_migration\Plugin\migrate\DestinationFieldTrait;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
diff --git a/src/Plugin/migrate/source/LocationFieldWidget.php b/src/Plugin/migrate/source/LocationFieldWidget.php
index f725077..a0543de 100644
--- a/src/Plugin/migrate/source/LocationFieldWidget.php
+++ b/src/Plugin/migrate/source/LocationFieldWidget.php
@@ -6,6 +6,7 @@ use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\field\Plugin\migrate\source\d7\FieldInstancePerFormDisplay;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
+use Drupal\location_migration\Plugin\migrate\DestinationFieldTrait;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
diff --git a/tests/src/Kernel/Migrate/d7/LocationMigrationTestBase.php b/tests/src/Kernel/Migrate/d7/LocationMigrationTestBase.php
index 178239a..999227c 100644
--- a/tests/src/Kernel/Migrate/d7/LocationMigrationTestBase.php
+++ b/tests/src/Kernel/Migrate/d7/LocationMigrationTestBase.php
@@ -3,8 +3,6 @@
 namespace Drupal\Tests\location_migration\Kernel\Migrate\d7;
 
 use Drupal\Core\Site\Settings;
-use Drupal\migrate\Plugin\MigrationInterface;
-use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal\Tests\migrate_drupal\Kernel\MigrateDrupalTestBase;
 
 /**
@@ -100,95 +98,39 @@ abstract class LocationMigrationTestBase extends MigrateDrupalTestBase {
       'd7_field_instance',
       'd7_field_formatter_settings',
       'd7_field_instance_widget_settings',
-      'd7_filter_format',
     ]);
     $this->stopCollectingMessages();
 
-    $this->startCollectingMessages();
     $this->executeMigrations([
       'd7_taxonomy_vocabulary',
-      'd7_entity_location:taxonomy_term',
-      'd7_entity_location_instance:taxonomy_term:vocabulary_1',
-      'd7_entity_location_widget_settings:taxonomy_term:vocabulary_1',
+      'd7_entity_location_field:taxonomy_term',
+      'd7_entity_location_field_instance:taxonomy_term:vocabulary_1',
+      'd7_entity_location_field_widget:taxonomy_term:vocabulary_1',
+      'd7_entity_location_field_formatter:taxonomy_term:vocabulary_1',
       'd7_taxonomy_term:vocabulary_1',
-      'd7_entity_location_formatter_settings:taxonomy_term:vocabulary_1',
     ]);
-    $this->stopCollectingMessages();
-    $this->assertEmpty($this->migrateMessages);
 
-    $this->startCollectingMessages();
     $this->executeMigrations([
       'd7_user_role',
-      'd7_entity_location:user',
-      'd7_entity_location_instance:user:user',
-      'd7_entity_location_widget_settings:user:user',
+      'd7_entity_location_field:user',
+      'd7_entity_location_field_instance:user:user',
+      'd7_entity_location_field_widget:user:user',
+      'd7_entity_location_field_formatter:user:user',
       'd7_user',
-      'd7_entity_location_formatter_settings:user:user',
     ]);
-    $this->stopCollectingMessages();
-    $this->assertEmpty($this->migrateMessages);
 
-    $this->startCollectingMessages();
-    $this->executeMigrationWithDependencies($classic_node_migration ? 'd7_node' : 'd7_node_complete');
-    $this->stopCollectingMessages();
-    $this->assertEmpty($this->migrateMessages);
-
-    $this->startCollectingMessages();
+    $node_migration_base = $classic_node_migration ? 'd7_node' : 'd7_node_complete';
     $this->executeMigrations([
+      'd7_field_location:node',
+      'd7_field_location_instance:node',
+      'd7_entity_location_field:node',
+      'd7_entity_location_field_instance:node',
+      'd7_entity_location_field_widget:node',
+      'd7_entity_location_field_formatter:node',
+      $node_migration_base,
       'd7_field_location_widget:node',
       'd7_field_location_formatter:node',
     ]);
-    $this->stopCollectingMessages();
-    $this->assertEmpty($this->migrateMessages);
-
-    $this->startCollectingMessages();
-    $this->executeMigrations([
-      'd7_entity_location_widget_settings:node',
-      'd7_entity_location_formatter_settings:node',
-    ]);
-    $this->stopCollectingMessages();
-    $this->assertEmpty($this->migrateMessages);
-  }
-
-  /**
-   * Execute a migration's dependencies followed by the migration.
-   *
-   * @param string $plugin_id
-   *   The migration id to execute.
-   */
-  protected function executeMigrationWithDependencies(string $plugin_id): void {
-    $migration_plugin_manager = $this->container->get('plugin.manager.migration');
-    assert($migration_plugin_manager instanceof MigrationPluginManagerInterface);
-    $migrations = $migration_plugin_manager->createInstances($plugin_id);
-    foreach ($migrations as $migration) {
-      $this->executeMigrationDependencies($migration);
-      $this->executeMigration($migration);
-    }
-  }
-
-  /**
-   * Find and execute a migration's dependencies.
-   *
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
-   *   The Migration from which to execute dependencies.
-   */
-  protected function executeMigrationDependencies(MigrationInterface $migration): void {
-    $dependencies = $migration->getMigrationDependencies();
-    foreach ($dependencies['required'] as $dependency) {
-      $plugin = $this->getMigration($dependency);
-      if (!$plugin->allRowsProcessed()) {
-        $this->executeMigrationDependencies($plugin);
-        $this->executeMigration($plugin);
-      }
-    }
-    foreach ($dependencies['optional'] as $dependency) {
-      if ($plugin = $this->getMigration($dependency)) {
-        if (!$plugin->allRowsProcessed()) {
-          $this->executeMigrationDependencies($plugin);
-          $this->executeMigration($plugin);
-        }
-      }
-    }
   }
 
 }
